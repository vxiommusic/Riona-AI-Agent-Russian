
import { Browser, DEFAULT_INTERCEPT_RESOLUTION_PRIORITY } from "puppeteer";
import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import AdblockerPlugin from "puppeteer-extra-plugin-adblocker";
import UserAgent from "user-agents";
import { Server } from "proxy-chain";
import { IGpassword, IGusername } from "../secret";
import logger from "../config/logger";
import { Instagram_cookiesExist, loadCookies, saveCookies } from "../utils";
import { runAgent } from "../Agent";
import { getInstagramCommentSchema } from "../Agent/schema";

// Add stealth plugin to puppeteer
puppeteer.use(StealthPlugin());
puppeteer.use(
    AdblockerPlugin({
        // Optionally enable Cooperative Mode for several request interceptors
        interceptResolutionPriority: DEFAULT_INTERCEPT_RESOLUTION_PRIORITY,
    })
);


async function runInstagram() {
    // Create a local proxy server
    const server = new Server({ port: 8000 });
    await server.listen();
    const checkMode = process.env.NODE_ENV === "production" ? true : false;
    const proxyUrl = `http://localhost:8000`;
    const browser: Browser = await puppeteer.launch({
        headless: checkMode,
        args: [`--proxy-server=${proxyUrl}`], // Use the proxy server
    });

    // Check if cookies exist and load them into the page
    if (await Instagram_cookiesExist()) {
        logger.info("Loading cookies...:üöß");
        const cookies = await loadCookies("./cookies/Instagramcookies.json");
        await browser.setCookie(...cookies);
    }
    const page = await browser.newPage();
    // await page.setViewport({ width: 1280, height: 800, deviceScaleFactor: 1 });

    // Set a random PC user-agent
    const userAgent = new UserAgent({ deviceCategory: "desktop" });
    const randomUserAgent = userAgent.toString();
    logger.info(`Using user-agent: ${randomUserAgent}`);
    await page.setUserAgent(randomUserAgent);

    // Check if cookies
    if (await Instagram_cookiesExist()) {
        logger.info("Cookies loaded, skipping login...");
        await page.goto("https://www.instagram.com", { waitUntil: "networkidle2" });

        // Check if login was successful by verifying page content (e.g., user profile or feed)
        const isLoggedIn = await page.$("a[href='/direct/inbox/']");
        if (isLoggedIn) {
            logger.info("Login verified with cookies.");
        } else {
            logger.warn("Cookies invalid or expired. Logging in again...");
            await loginWithCredentials(page, browser);
        }
    } else {
        // If no cookies are available, perform login with credentials
        await loginWithCredentials(page, browser);
    }

    // Optionally take a screenshot after loading the page
    await page.screenshot({ path: "logged_in.png" });

    // Navigate to the Instagram homepage
    await page.goto("https://www.instagram.com/");

    // Interact with the first post
    await interactWithPosts(page);

    // Close the browser
    await browser.close();
    await server.close(true); // Stop the proxy server and close connections
}




const loginWithCredentials = async (page: any, browser: Browser) => {
    try {
        await page.goto("https://www.instagram.com/accounts/login/");
        await page.waitForSelector('input[name="username"]');

        // Fill out the login form
        await page.type('input[name="username"]', IGusername); // Replace with your username
        await page.type('input[name="password"]', IGpassword); // Replace with your password
        await page.click('button[type="submit"]');

        // Wait for navigation after login
        await page.waitForNavigation();

        // Save cookies after login
        const cookies = await browser.cookies();
        await saveCookies("./cookies/Instagramcookies.json", cookies);
    } catch (error) {
        logger.error("Error logging in with credentials:", error);
    }
}

async function interactWithPosts(page: any) {
    let postIndex = 1; // Start with the first post
    const maxPosts = 50; // Limit to prevent infinite scrolling

    while (postIndex <= maxPosts) {
        try {
            const postSelector = `article:nth-of-type(${postIndex})`;

            // Check if the post exists
            if (!(await page.$(postSelector))) {
                console.log("No more posts found. Exiting loop...");
                break;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ—Å—Ç–æ–º (800-1500 –º—Å)
            await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 700) + 800));
            
            console.log(`–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ ${postIndex}...`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞ (–ø–æ–≤—ã—à–∞–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)
            const likeButtonSelectors = [
                `${postSelector} svg[aria-label="Like"]`,
                `${postSelector} svg[aria-label="–ù—Ä–∞–≤–∏—Ç—Å—è"]`,
                `${postSelector} button[type="button"] svg`,
                `${postSelector} span[role="button"] svg`,
                `${postSelector} div[role="button"] svg`,
                `${postSelector} div.x9f619 div.xnz67gz div[role="button"]`
            ];
            
            let likeButton = null;
            let ariaLabel = null;
            
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
            for (const selector of likeButtonSelectors) {
                try {
                    likeButton = await page.$(selector);
                    if (likeButton) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç aria-label –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–æ–ø–∫–∏
                        ariaLabel = await likeButton.evaluate((el: Element) => el.getAttribute("aria-label"));
                        
                        if (ariaLabel === "Like" || ariaLabel === "–ù—Ä–∞–≤–∏—Ç—Å—è" || !ariaLabel) {
                            console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                            break;
                        }
                    }
                } catch (error: unknown) {
                    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}: ${error instanceof Error ? error.message : String(error)}`);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å –ø–æ–º–æ—â—å—é –æ–±—ã—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤,
            // –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
            if (!likeButton) {
                console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞...`);
                
                // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å page.click() –Ω–∞–ø—Ä—è–º—É—é —Å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                const specificSelectors = [
                    `${postSelector} article div:nth-child(1) section:nth-child(1) span:nth-child(1) button`,
                    `${postSelector} section span button`, // –ß–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ Instagram
                    `${postSelector} section span:first-child button`, // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ –æ–±—ã—á–Ω–æ –ª–∞–π–∫
                    `${postSelector} section:last-child span:first-child button`,
                    `${postSelector} div[role="button"]:has(svg)` // –ù–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å SVG –≤–Ω—É—Ç—Ä–∏
                ];
                
                for (const selector of specificSelectors) {
                    try {
                        const element = await page.$(selector);
                        if (element) {
                            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º (400-900 –º—Å)
                            await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 500) + 400));
                            
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ mousedown/mouseup –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–ª–∏–∫–∞ - –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –≤ Instagram
                            await element.evaluate((el: HTMLElement) => {
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∏–∫–∞
                                const rect = el.getBoundingClientRect();
                                const x = rect.left + rect.width * (0.5 + (Math.random() * 0.3 - 0.15)); // –°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞ ¬±15%
                                const y = rect.top + rect.height * (0.5 + (Math.random() * 0.3 - 0.15));

                                // –°–æ–∑–¥–∞–µ–º mousedown —Å–æ–±—ã—Ç–∏–µ
                                const mousedownEvent = new MouseEvent('mousedown', {
                                    bubbles: true,
                                    cancelable: true,
                                    view: window,
                                    clientX: x,
                                    clientY: y
                                });
                                el.dispatchEvent(mousedownEvent);

                                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º (10-80 –º—Å)
                                setTimeout(() => {
                                    // –°–æ–∑–¥–∞–µ–º mouseup —Å–æ–±—ã—Ç–∏–µ
                                    const mouseupEvent = new MouseEvent('mouseup', {
                                        bubbles: true,
                                        cancelable: true,
                                        view: window,
                                        clientX: x,
                                        clientY: y
                                    });
                                    el.dispatchEvent(mouseupEvent);
                                    
                                    // –ò, –Ω–∞–∫–æ–Ω–µ—Ü, —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                                    const clickEvent = new MouseEvent('click', {
                                        bubbles: true,
                                        cancelable: true,
                                        view: window,
                                        clientX: x,
                                        clientY: y
                                    });
                                    el.dispatchEvent(clickEvent);
                                }, Math.floor(Math.random() * 70) + 10);
                            });
                            
                            console.log(`–ü–æ—Å—Ç ${postIndex} –ª–∞–π–∫–Ω—É—Ç —Å –ø–æ–º–æ—â—å—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                            return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
                        }
                    } catch (error: unknown) {
                        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É ${selector}: ${error instanceof Error ? error.message : String(error)}`);
                    }
                }
                
                // –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ JavaScript
                const likeButtonFound = await page.evaluate((postSel: string) => {
                    try {
                        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º –ø–æ—Å—Ç
                        const article = document.querySelector(postSel);
                        if (!article) return { success: false, reason: 'post_not_found' };
                        
                        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ SVG –∏–∫–æ–Ω–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å—Ç–µ
                        const svgElements = Array.from(article.querySelectorAll('svg'));
                        const buttons = Array.from(article.querySelectorAll('button, [role="button"]'));
                        
                        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ aria-label (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
                        for (const svg of svgElements) {
                            const ariaLabel = svg.getAttribute('aria-label');
                            if (ariaLabel && (
                                ariaLabel.toLowerCase() === 'like' || 
                                ariaLabel.toLowerCase() === '–Ω—Ä–∞–≤–∏—Ç—Å—è'
                            )) {
                                // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞
                                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                                let parentElement = svg instanceof Element ? svg.parentElement : null;
                                let clickableElement = parentElement instanceof HTMLElement ? parentElement : null;
                                
                                // –ò—â–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–µ
                                while (parentElement && !parentElement.hasAttribute('role') && parentElement !== article) {
                                    if (parentElement instanceof HTMLElement) {
                                        clickableElement = parentElement;
                                    }
                                    parentElement = parentElement.parentElement;
                                }
                                
                                // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                                setTimeout(() => {
                                    try {
                                        // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                        if (clickableElement) {
                                            clickableElement.click();
                                        } else {
                                            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                                            const parentElement = svg instanceof Element ? svg.parentElement : null;
                                            if (parentElement instanceof HTMLElement) {
                                                parentElement.click();
                                            }
                                        }
                                    } catch (e) {
                                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ SVG —ç–ª–µ–º–µ–Ω—Ç:', e);
                                    }
                                }, Math.random() * 250 + 100);
                                
                                return { success: true, method: 'aria_label' };
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–æ–±—ã—á–Ω–æ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ø–æ—Å—Ç–∞)
                        const sections = article.querySelectorAll('section');
                        if (sections.length > 0) {
                            const interactionSection = sections[sections.length - 1];
                            const sectionButtons = interactionSection.querySelectorAll('button, [role="button"]');
                            
                            if (sectionButtons.length > 0) {
                                // –û–±—ã—á–Ω–æ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è - —ç—Ç–æ –ª–∞–π–∫
                                const likeButton = sectionButtons[0];
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–Ω—É—Ç –ª–∏ —É–∂–µ –ø–æ—Å—Ç
                                const svg = likeButton.querySelector('svg');
                                const ariaLabel = svg instanceof Element ? svg.getAttribute('aria-label') : null;
                                if (ariaLabel && ariaLabel.toLowerCase().includes('unlike')) {
                                    return { success: false, reason: 'already_liked' };
                                }
                                
                                setTimeout(() => {
                                    try {
                                        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –∫–ª–∏–∫–∞
                                        if ('click' in likeButton) {
                                            (likeButton as any).click();
                                        } else {
                                            const parent = likeButton.parentElement as HTMLElement;
                                            if (parent) parent.click();
                                        }
                                    } catch (e) {
                                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ:', e);
                                    }
                                }, Math.random() * 250 + 100);
                                
                                return { success: true, method: 'section_button' };
                            }
                        }
                        
                        return { success: false, reason: 'like_button_not_found' };
                    } catch (error) {
                        return { success: false, reason: 'error', message: String(error) };
                    }
                }, postSelector);
                
                if (likeButtonFound && likeButtonFound.success) {
                    console.log(`–ü–æ—Å—Ç ${postIndex} –ª–∞–π–∫–Ω—É—Ç —á–µ—Ä–µ–∑ JavaScript (–º–µ—Ç–æ–¥: ${likeButtonFound.method}).`);
                } else if (likeButtonFound && likeButtonFound.reason === 'already_liked') {
                    console.log(`–ü–æ—Å—Ç ${postIndex} —É–∂–µ –ª–∞–π–∫–Ω—É—Ç.`);
                } else {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ ${postIndex}: ${likeButtonFound ? likeButtonFound.reason : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                }
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
                if (ariaLabel === "Like" || ariaLabel === "–ù—Ä–∞–≤–∏—Ç—Å—è" || !ariaLabel) {
                    // –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º (300-800 –º—Å)
                    await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 500) + 300));
                    
                    console.log(`–õ–∞–π–∫–∞–µ–º –ø–æ—Å—Ç ${postIndex} —Å —ç–º—É–ª—è—Ü–∏–µ–π –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏...`);
                    try {
                        // –ü–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏
                        // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ DOM –∏–∑–º–µ–Ω–∏–ª—Å—è –º–µ–∂–¥—É –ø–æ–∏—Å–∫–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º
                        const freshLikeButton = await page.$(`${postSelector} svg[aria-label="Like"], ${postSelector} svg[aria-label="–ù—Ä–∞–≤–∏—Ç—Å—è"]`);
                        if (!freshLikeButton) {
                            throw new Error('–ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ –∏—Å—á–µ–∑–ª–∞ –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º');
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DOM
                        await new Promise(resolve => setTimeout(resolve, 100));
                        
                        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                        const boundingBox = await freshLikeButton.boundingBox();
                        if (!boundingBox) {
                            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞');
                        }

                        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
                        const centerX = boundingBox.x + boundingBox.width / 2 + (Math.random() * 10 - 5);
                        const centerY = boundingBox.y + boundingBox.height / 2 + (Math.random() * 10 - 5);

                        // 1. –°–Ω–∞—á–∞–ª–∞ –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –º—ã—à—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É (human-like –¥–≤–∏–∂–µ–Ω–∏–µ)
                        await page.mouse.move(centerX - 100, centerY - 100, { steps: 10 }); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É
                        await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 100) + 50)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                        // 2. –ü–ª–∞–≤–Ω–æ –¥–≤–∏–≥–∞–µ–º—Å—è –∫ —Ç–æ—á–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏ –ø–æ –∫—Ä–∏–≤–æ–π
                        // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –Ω–µ–º–Ω–æ–≥–æ –∏–∑–æ–≥–Ω—É—Ç–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π
                        const controlPoints = [
                            { x: centerX - 50, y: centerY - 70 },
                            { x: centerX - 25, y: centerY - 40 },
                            { x: centerX - 5, y: centerY - 15 },
                            { x: centerX, y: centerY }
                        ];

                        for (let i = 0; i < controlPoints.length; i++) {
                            await page.mouse.move(controlPoints[i].x, controlPoints[i].y, { steps: 5 });
                            await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 30) + 20));
                        }

                        // 3. –ï—â–µ –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ä–µ—à–∞–µ—Ç, –∫–ª–∏–∫–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
                        await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 300) + 100));

                        // 4. –ù–∞–∂–∏–º–∞–µ–º –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –µ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
                        await page.mouse.down();
                        await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 80) + 30)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 30-110 –º—Å

                        // 5. –û—Ç–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É
                        await page.mouse.up();

                        // 6. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –∏–º–∏—Ç–∏—Ä—É—è –ø–æ—Å–ª–µ–∫–ª–∏–∫–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                        await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 200) + 100));
                        
                        // 7. –û—Ç–≤–æ–¥–∏–º –º—ã—à—å –≤ —Å—Ç–æ—Ä–æ–Ω—É (–∫–∞–∫ –±—É–¥—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–µ–π—Å—Ç–≤–∏—é)
                        await page.mouse.move(centerX + 100, centerY + 50, { steps: 5 });

                        console.log(`–ü–æ—Å—Ç ${postIndex} —É—Å–ø–µ—à–Ω–æ –ª–∞–π–∫–Ω—É—Ç —Å –ø–æ–ª–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏.`);
                    } catch (error: unknown) {
                        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
                        
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–± - –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è
                        try {
                            console.log(`–ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–± –ª–∞–π–∫–∞...`);
                            await likeButton.click({ delay: Math.floor(Math.random() * 50) + 50, force: true });
                            console.log(`–ü–æ—Å—Ç ${postIndex} –ª–∞–π–∫–Ω—É—Ç –∑–∞–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.`);
                        } catch (backupError: unknown) {
                            console.log(`–ò –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${backupError instanceof Error ? backupError.message : String(backupError)}`);
                        }
                    }
                } else if (ariaLabel === "Unlike" || ariaLabel === "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è") {
                    console.log(`–ü–æ—Å—Ç ${postIndex} —É–∂–µ –ª–∞–π–∫–Ω—É—Ç.`);
                } else {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ ${postIndex}.`);
                }
            }

            // Extract and log the post caption
            const captionSelector = `${postSelector} div.x9f619 span._ap3a div span._ap3a`;
            const captionElement = await page.$(captionSelector);

            let caption = "";
            if (captionElement) {
                caption = await captionElement.evaluate((el: HTMLElement) => el.innerText);
                console.log(`Caption for post ${postIndex}: ${caption}`);
            } else {
                console.log(`No caption found for post ${postIndex}.`);
            }

            // Check if there is a '...more' link to expand the caption
            const moreLinkSelector = `${postSelector} div.x9f619 span._ap3a span div span.x1lliihq`;
            const moreLink = await page.$(moreLinkSelector);
            if (moreLink) {
                console.log(`Expanding caption for post ${postIndex}...`);
                await moreLink.click(); // Click the '...more' link to expand the caption
                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for the caption to expand
                const expandedCaption = await captionElement.evaluate(
                    (el: HTMLElement) => el.innerText
                );
                console.log(
                    `Expanded Caption for post ${postIndex}: ${expandedCaption}`
                );
                caption = expandedCaption; // Update caption with expanded content
            }

            // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
            if (!caption || caption.trim() === '' || caption.trim().length < 50) {
                console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ ${postIndex} - —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${caption ? caption.trim().length : 0} —Å–∏–º–≤–æ–ª–æ–≤, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50)`);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (800-1800 –º—Å)
                await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 1000) + 800));
                
                console.log(`–ü–æ–∏—Å–∫ –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ ${postIndex}...`);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                const commentBoxSelectors = [
                    `${postSelector} textarea`, 
                    `${postSelector} form textarea`,
                    `${postSelector} div[contenteditable="true"]`,
                    `${postSelector} div.x9f619 form textarea`,
                    `${postSelector} div[role="dialog"] textarea`
                ];
                
                let commentBox = null;
                
                // –ü—Ä–æ–±—É–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
                for (const selector of commentBoxSelectors) {
                    try {
                        const element = await page.$(selector);
                        if (element) {
                            commentBox = element;
                            console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                            break;
                        }
                    } catch (error: unknown) {
                        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}: ${error instanceof Error ? error.message : String(error)}`);
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞
                if (!commentBox) {
                    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...`);
                    
                    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ JavaScript
                    const commentBoxResult = await page.evaluate((postSel: string) => {
                        try {
                            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
                            const article = document.querySelector(postSel);
                            if (!article) return { success: false, reason: 'post_not_found' };
                            
                            // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É textarea
                            const textareas = article.querySelectorAll('textarea');
                            if (textareas.length > 0) {
                                // –ù–∞–∂–∞—Ç—å –Ω–∞ –ø–æ–ª–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
                                setTimeout(() => {
                                    try {
                                        (textareas[0] as HTMLTextAreaElement).focus();
                                        (textareas[0] as HTMLTextAreaElement).click();
                                    } catch (e) {
                                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è textarea:', e);
                                    }
                                }, Math.random() * 300 + 100);
                                
                                return { success: true, method: 'textarea_found' };
                            }
                            
                            // –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –ø–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—É —Ç–µ–∫—Å—Ç–∞
                            const placeholderTexts = ['Add a comment...', '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'comment'];
                            const allElements = article.querySelectorAll('*');
                            
                            for (const element of allElements) {
                                const placeholder = element.getAttribute('placeholder');
                                const ariaLabel = element.getAttribute('aria-label');
                                
                                if (placeholder && placeholderTexts.some(text => placeholder.toLowerCase().includes(text.toLowerCase()))) {
                                    setTimeout(() => {
                                        try {
                                            (element as HTMLElement).focus();
                                            (element as HTMLElement).click();
                                        } catch (e) {
                                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º:', e);
                                        }
                                    }, Math.random() * 300 + 100);
                                    
                                    return { success: true, method: 'placeholder_found' };
                                }
                                
                                if (ariaLabel && placeholderTexts.some(text => ariaLabel.toLowerCase().includes(text.toLowerCase()))) {
                                    setTimeout(() => {
                                        try {
                                            (element as HTMLElement).focus();
                                            (element as HTMLElement).click();
                                        } catch (e) {
                                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è —Å aria-label:', e);
                                        }
                                    }, Math.random() * 300 + 100);
                                    
                                    return { success: true, method: 'aria_label_found' };
                                }
                            }
                            
                            // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–Ω–∏–∑—É –ø–æ—Å—Ç–∞)
                            const sections = article.querySelectorAll('section');
                            if (sections.length > 0) {
                                const lastSection = sections[sections.length - 1];
                                const formElements = lastSection.querySelectorAll('form');
                                
                                if (formElements.length > 0) {
                                    const form = formElements[formElements.length - 1];
                                    const inputs = form.querySelectorAll('textarea, input, [contenteditable="true"]');
                                    
                                    if (inputs.length > 0) {
                                        setTimeout(() => {
                                            try {
                                                (inputs[0] as HTMLElement).focus();
                                                (inputs[0] as HTMLElement).click();
                                            } catch (e) {
                                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–µ:', e);
                                            }
                                        }, Math.random() * 300 + 100);
                                        
                                        return { success: true, method: 'form_input_found' };
                                    }
                                }
                            }
                            
                            return { success: false, reason: 'comment_box_not_found' };
                        } catch (error: unknown) {
                            return { success: false, reason: 'error', message: String(error) };
                        }
                    }, postSelector);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ JavaScript
                    if (commentBoxResult.success) {
                        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ JavaScript: ${commentBoxResult.method}`);
                        
                        // –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è —á–µ—Ä–µ–∑ JavaScript –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞
                        await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 500) + 500));
                        commentBox = await page.$(commentBoxSelectors[0]);
                    } else {
                        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ ${postIndex}: ${commentBoxResult ? commentBoxResult.reason : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                if (commentBox) {
                    console.log(`–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç ${postIndex}...`);
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫ –ø–æ—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ
                const detectLanguage = (text: string): string => {
                    const russianPattern = /[–ê-–Ø–∞-—è–Å—ë]/;
                    
                    if (russianPattern.test(text)) {
                        return 'ru';
                    }
                    
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    return 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                };
                
                const postLanguage = detectLanguage(caption);
                let promptTemplate = '';
                
                if (postLanguage === 'ru') {
                    promptTemplate = `–ù–∞–ø–∏—à–∏ –≤–¥—É–º—á–∏–≤—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –∑—Ä–µ–ª—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: "${caption}". 
                    –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω, —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–µ—Å–µ–¥–µ. 
                    –û–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å —ç–º–ø–∞—Ç–∏—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –∏–∑–±–µ–≥–∞—è —Å–ª–∏—à–∫–æ–º casual –∏–ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ç–æ–Ω–∞. 
                    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Instagram –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∞–º–∞. 
                    –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
                } else {
                    promptTemplate = `Craft a thoughtful, engaging, and mature reply to the following post: "${caption}". 
                    Ensure the reply is relevant, insightful, and adds value to the conversation. 
                    It should reflect empathy and professionalism, and avoid sounding too casual or superficial. 
                    The reply should be 200 characters or less and not go against Instagram Community Standards on spam. 
                    Try your best to humanize the reply and make it sound natural.`;
                }
                
                const prompt = promptTemplate;
                const schema = getInstagramCommentSchema();
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
                let commentResult = await runAgent(schema, prompt);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                let comment = "";
                
                try {
                    if (typeof commentResult === 'string') {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ JSON
                        if (commentResult.trim().startsWith('{') || commentResult.trim().startsWith('[')) {
                            try {
                                const jsonData = JSON.parse(commentResult);
                                
                                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä JSON
                                if (Array.isArray(jsonData) && jsonData.length > 0) {
                                    const firstItem = jsonData[0];
                                    comment = firstItem.comment || firstItem.text || firstItem.content || firstItem.message || '';
                                } else if (jsonData && typeof jsonData === 'object') {
                                    comment = jsonData.comment || jsonData.text || jsonData.content || jsonData.message || '';
                                }
                            } catch (jsonError) {
                                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
                                comment = commentResult;
                            }
                        } else {
                            // –ù–µ JSON —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            comment = commentResult;
                        }
                    } else if (commentResult && typeof commentResult === 'object') {
                        // –û–±—ä–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        if (Array.isArray(commentResult) && commentResult.length > 0) {
                            const firstItem = commentResult[0];
                            comment = firstItem.comment || firstItem.text || firstItem.content || firstItem.message || '';
                        } else {
                            comment = commentResult.comment || commentResult.text || commentResult.content || commentResult.message || '';
                        }
                        
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                        if (!comment) {
                            comment = JSON.stringify(commentResult);
                        }
                    } else {
                        // –î—Ä—É–≥–æ–π —Ç–∏–ø, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                        comment = String(commentResult || '');
                    }
                } catch (extractError) {
                    console.error('Error extracting comment:', extractError);
                    comment = '';
                }
                
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                if (!comment || comment.trim() === '') {
                    comment = "Great post! Really enjoyed this content!"
                }
                
                // –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                comment = comment.replace(/[^\x20-\x7E\u0400-\u04FF\s]/g, ''); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ASCII –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
                comment = comment.substring(0, 200); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                console.log(`Generated comment: ${comment}`);
                try {
                    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
                    for (const char of comment) {
                        await commentBox.type(char);
                        await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 50) + 10));
                    }
                } catch (error: unknown) {
                    if (error instanceof Error) {
                        console.error(`Error typing comment: ${error.message}`);
                    } else {
                        console.error(`Error typing comment: ${String(error)}`);
                    }
                    
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    try {
                        await page.evaluate((selector: string, text: string) => {
                            const element = document.querySelector(selector);
                            if (element) {
                                (element as HTMLInputElement).value = text;
                            }
                        }, commentBoxSelectors[0], comment);
                    } catch (evalError: unknown) {
                        if (evalError instanceof Error) {
                            console.error(`Failed alternative method: ${evalError.message}`);
                        } else {
                            console.error(`Failed alternative method: ${String(evalError)}`);
                        }
                    }
                }

                // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                console.log(`Looking for the post button...`);
                
                // –ò—â–µ–º –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ)
                let postButton = null;
                try {
                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                    const possibleButtonSelectors = [
                        `${postSelector} button[type="submit"]`,
                        `${postSelector} div[role="button"]`,
                        `${postSelector} div.x9f619 button`,
                        `${postSelector} div[data-visualcompletion="ignore-dynamic"] button`
                    ];
                    
                    for (const selector of possibleButtonSelectors) {
                        const button = await page.$(selector);
                        if (button) {
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            const isEnabled = await button.evaluate((el: Element) => {
                                return !el.hasAttribute('disabled') && 
                                    (el.textContent?.includes('Post') || 
                                     el.textContent?.includes('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å') ||
                                     el.getAttribute('aria-label')?.includes('Post') ||
                                     el.getAttribute('aria-label')?.includes('Comment'));
                            });
                            
                            if (isEnabled) {
                                postButton = button;
                                console.log(`Found post button with selector: ${selector}`);
                                break;
                            }
                        }
                    }
                    
                    if (postButton) {
                        console.log(`Posting comment on post ${postIndex}...`);
                        await postButton.click();
                        console.log(`Comment posted on post ${postIndex}.`);
                        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    } else {
                        console.log("Post button not found after trying all selectors.");
                        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏–µ Enter
                        await commentBox.press('Enter');
                        console.log(`Tried posting comment using Enter key.`);
                    }
                } catch (btnError: unknown) {
                    if (btnError instanceof Error) {
                        console.error(`Error finding post button: ${btnError.message}`);
                    } else {
                        console.error(`Error finding post button: ${String(btnError)}`);
                    }
                }
            } else {
                console.log("Comment box not found.");
            }
        } // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ—Å—Ç–µ

            // Wait before moving to the next post (randomize between 5 and 10 seconds)
            const delay = Math.floor(Math.random() * 5000) + 5000; // Random delay between 5 and 10 seconds
            console.log(
                `Waiting ${delay / 1000} seconds before moving to the next post...`
            );
            await new Promise(resolve => setTimeout(resolve, delay));

            // Scroll to the next post
            await page.evaluate(() => {
                window.scrollBy(0, window.innerHeight);
            });

            postIndex++; // Move to the next post
        } catch (error) {
            console.error(`Error interacting with post ${postIndex}:`, error);
            break;
        }
    }
}



export { runInstagram };

