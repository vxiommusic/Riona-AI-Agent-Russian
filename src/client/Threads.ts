import { Browser, DEFAULT_INTERCEPT_RESOLUTION_PRIORITY } from "puppeteer";
import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import AdblockerPlugin from "puppeteer-extra-plugin-adblocker";
import UserAgent from "user-agents";
import { Server } from "proxy-chain";
import { IGpassword, IGusername } from "../secret";
import logger from "../config/logger";
import { Instagram_cookiesExist, loadCookies, saveCookies } from "../utils";
import { runAgent } from "../Agent";
import { getInstagramCommentSchema } from "../Agent/schema";

// –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω—ã –¥–ª—è puppeteer (–≤–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)
puppeteer.use(StealthPlugin());
puppeteer.use(
    AdblockerPlugin({
        interceptResolutionPriority: DEFAULT_INTERCEPT_RESOLUTION_PRIORITY,
    })
);

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ Threads
 */
async function runThreads() {
    // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const server = new Server({ port: 8002 });
    await server.listen();
    const checkMode = process.env.NODE_ENV === "production" ? true : false;
    const proxyUrl = `http://localhost:8002`;
    const browser: Browser = await puppeteer.launch({
        headless: checkMode,
        args: [`--proxy-server=${proxyUrl}`, `--disable-features=site-per-process`], // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
    });

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º cookies, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (await Instagram_cookiesExist()) {
            logger.info("Loading cookies...:üöß");
            const cookies = await loadCookies("./cookies/Instagramcookies.json");
            await browser.setCookie(...cookies);
        }
        const page = await browser.newPage();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –ü–ö
        const userAgent = new UserAgent({ deviceCategory: "desktop" });
        const randomUserAgent = userAgent.toString();
        logger.info(`Using user-agent: ${randomUserAgent}`);
        await page.setUserAgent(randomUserAgent);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
        if (await Instagram_cookiesExist()) {
            logger.info("Cookies loaded, trying to use for Threads...");
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Threads
            await page.goto("https://www.threads.com", { waitUntil: "networkidle2" });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –≤—Ö–æ–¥ –ø–æ –∫—É–∫–∏
            const isLoggedIn = await page.$("button[aria-label='New thread']") || 
                               await page.$("a[href='/direct/inbox/']") ||
                               await page.$("[aria-label='Menu']");
                               
            if (isLoggedIn) {
                logger.info("Login verified with cookies on Threads.");
            } else {
                logger.warn("Cookies invalid or expired. Logging in again...");
                await loginWithCredentials(page, browser);
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∫—É–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await loginWithCredentials(page, browser);
        }

        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        await page.screenshot({ path: "threads_logged_in.png" });

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–µ–Ω—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        await page.goto("https://www.threads.com/custom_feed/18059649997908421", { 
            waitUntil: "networkidle2",
            timeout: 60000 // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        });

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç—ã
        await page.waitForSelector('article', { timeout: 30000 });
        logger.info("Successfully navigated to entrepreneurship feed.");

        // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –ø–æ—Å—Ç–∞–º–∏ –≤ –ª–µ–Ω—Ç–µ
        await interactWithThreadsPosts(page);

    } catch (error) {
        logger.error("Error running Threads bot:", error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–∫—Å–∏
        await browser.close();
        await server.close(true);
        logger.info("Threads session completed.");
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
const loginWithCredentials = async (page: any, browser: Browser) => {
    try {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Threads, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ Instagram
        await page.goto("https://www.threads.com/login", { waitUntil: "networkidle2" });
        logger.info("–ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Threads/Instagram...");
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await page.screenshot({ path: "instagram_login_page.png" });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –∏ –∂–¥—ë–º –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
        logger.info("–û–∂–∏–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
        await page.waitForSelector('input[type="text"]', { timeout: 15000 });
        await page.waitForSelector('input[type="password"]', { timeout: 15000 });
        
        // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ó–∞–º–µ–¥–ª—è–µ–º –≤–≤–æ–¥ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        logger.info(`–í–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${IGusername}...`);
        await typeWithHumanSpeed(page, 'input[type="text"]', IGusername);
        await typeWithHumanSpeed(page, 'input[type="password"]', IGpassword);
        
        // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));
        
        // –°–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - –Ω–∞–∂–∞—Ç—å ENTER –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        logger.info("–ù–∞–∂–∏–º–∞–µ–º ENTER –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...");
        await page.keyboard.press('Enter');
        
        // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç...");
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        logger.info("–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const saveLoginPrompt = await Promise.race([
                page.waitForSelector('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")', { timeout: 5000 }).then(() => true),
                page.waitForSelector('button:has-text("Save")', { timeout: 5000 }).then(() => true),
                new Promise(r => setTimeout(() => r(false), 5000))
            ]);
            
            if (saveLoginPrompt) {
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ...");
                await page.click('button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), button:has-text("Save")');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const notificationPrompt = await Promise.race([
                page.waitForSelector('button:has-text("–ù–µ —Å–µ–π—á–∞—Å")', { timeout: 5000 }).then(() => true),
                page.waitForSelector('button:has-text("Not Now")', { timeout: 5000 }).then(() => true),
                new Promise(r => setTimeout(() => r(false), 5000))
            ]);
            
            if (notificationPrompt) {
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
                await page.click('button:has-text("–ù–µ —Å–µ–π—á–∞—Å"), button:has-text("Not Now")');
            }
        } catch (promptError) {
            logger.warn("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:", promptError);
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ Threads –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Instagram
        await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 30000 }).catch(() => {
            logger.info("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É");
        });
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞
        await page.screenshot({ path: "instagram_logged_in.png" });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        logger.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
        const cookies = await browser.cookies();
        await saveCookies("./cookies/Instagramcookies.json", cookies);
        logger.info("Successfully logged in and saved cookies.");
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Threads –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Threads –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
        await page.goto("https://www.threads.com", { waitUntil: "networkidle2", timeout: 30000 });
        
    } catch (error) {
        logger.error("Error logging in with credentials:", error);
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
        await page.screenshot({ path: "instagram_login_error.png" });
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–∞–º–∏ –≤ –ª–µ–Ω—Ç–µ Threads
 */
async function interactWithThreadsPosts(page: any) {
    let postIndex = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    const maxPosts = 20; // –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    while (postIndex <= maxPosts) {
        try {
            console.log(`\n====\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–¥–∞ #${postIndex}...\n====`);
            
            // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
            const postSelector = `article:nth-of-type(${postIndex})`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            if (!(await page.$(postSelector))) {
                console.log("–ë–æ–ª—å—à–µ —Ç—Ä–µ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...");
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                const currentPostCount = await page.$$eval('article', (posts: Element[]) => posts.length);
                console.log(`–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–¥–æ–≤: ${currentPostCount}`);
                
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                await page.evaluate(() => {
                    window.scrollBy(0, window.innerHeight * 0.8);
                });
                
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (1-3 —Å–µ–∫—É–Ω–¥—ã)
                await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                const newPostCount = await page.$$eval('article', (posts: Element[]) => posts.length);
                if (newPostCount > currentPostCount) {
                    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newPostCount - currentPostCount} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–¥–æ–≤.`);
                    continue; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º
                } else {
                    console.log("–ù–æ–≤—ã—Ö —Ç—Ä–µ–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.");
                    break;
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ—Å—Ç–æ–º (1-2 —Å–µ–∫)
            await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));
            
            // === –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ ===
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            let threadText = await page.evaluate((selector: string) => {
                const threadElement = document.querySelector(selector);
                if (!threadElement) return "";
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                const textElements = threadElement.querySelectorAll('div[dir="auto"] > span');
                let text = "";
                textElements.forEach(el => {
                    text += el.textContent + " ";
                });
                return text.trim();
            }, postSelector);
            
            console.log(`–¢–µ–∫—Å—Ç —Ç—Ä–µ–¥–∞ #${postIndex}: ${threadText.substring(0, 100)}${threadText.length > 100 ? '...' : ''}`);
            
            if (threadText.length >= 50) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
                const detectedLanguage = detectLanguage(threadText);
                const comment = await generateComment(threadText, detectedLanguage);
                
                console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (${detectedLanguage}): ${comment.substring(0, 100)}${comment.length > 100 ? '...' : ''}`);
                
                // –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "Reply"
                const replyButtonSelector = `${postSelector} [aria-label="Reply"], ${postSelector} [aria-label="–û—Ç–≤–µ—Ç–∏—Ç—å"]`;
                const replyButton = await page.$(replyButtonSelector);
                
                if (replyButton) {
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
                    await humanClick(page, replyButtonSelector);
                    console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞.");
                    
                    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    await page.waitForSelector('textarea[placeholder]', { timeout: 5000 })
                        .catch(() => console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"));
                    
                    // –í–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∏
                    const commentSuccess = await typeWithHumanSpeed(page, 'textarea[placeholder]', comment);
                    
                    if (commentSuccess) {
                        // –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                        const postButtonSelector = 'button[type="submit"]';
                        const postButton = await page.$(postButtonSelector);
                        
                        if (postButton) {
                            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (0.5-1.5 —Å–µ–∫)
                            await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
                            
                            await humanClick(page, postButtonSelector);
                            console.log("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
                            
                            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                            await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
                        } else {
                            console.log("–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                        }
                    } else {
                        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.");
                    }
                } else {
                    console.log("–ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                }
            } else {
                console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${threadText.length} —Å–∏–º–≤–æ–ª–æ–≤, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50)`);
            }
            
            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É (4-8 —Å–µ–∫)
            const delay = Math.floor(Math.random() * 4000) + 4000;
            console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${delay / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–¥–æ–º...`);
            await new Promise(resolve => setTimeout(resolve, delay));
            
            postIndex++; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–¥–∞ #${postIndex}:`, error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å—Ç–æ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            postIndex++;
            await new Promise(resolve => setTimeout(resolve, 3000)); // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        }
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
 */
function detectLanguage(text: string): string {
    // –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    const russianPattern = /[–∞-—è–ê-–Ø—ë–Å]/;
    const indonesianPattern = /(\bdan\b|\byang\b|\bdi\b|\buntuk\b|\bini\b)/i;
    
    if (russianPattern.test(text)) return "ru";
    if (indonesianPattern.test(text)) return "id";
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
    return "en";
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ Google AI
 */
async function generateComment(text: string, language: string): Promise<string> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (schema –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        const schema = getInstagramCommentSchema();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –≤ –ø—Ä–æ–º–ø—Ç
        const promptWithLang = `[Language: ${language}] ${text}`;
        
        // –í—ã–∑—ã–≤–∞–µ–º runAgent —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: schema, prompt
        const response = await runAgent(schema, promptWithLang);
        return response || "Great post! üëç";
    } catch (error) {
        console.error("Error generating comment:", error);
        return language === "ru" 
            ? "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! üëç" 
            : language === "id" 
                ? "Postingan yang bagus! üëç" 
                : "Great post! üëç";
    }
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏
 */
async function humanClick(page: any, selector: string): Promise<boolean> {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
        const elementHandle = await page.$(selector);
        if (!elementHandle) return false;
        
        const box = await elementHandle.boundingBox();
        if (!box) return false;
        
        // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        const offsetX = Math.floor(Math.random() * (box.width * 0.6) + box.width * 0.2);
        const offsetY = Math.floor(Math.random() * (box.height * 0.6) + box.height * 0.2);
        
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ –≤ –ø–æ–∑–∏—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await page.mouse.move(box.x + offsetX, box.y + offsetY, { steps: 10 + Math.floor(Math.random() * 15) });
        
        // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º (100-300ms)
        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
        
        // –ö–ª–∏–∫
        await page.mouse.down();
        await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 150));
        await page.mouse.up();
        
        return true;
    } catch (error) {
        console.error("Error simulating human click:", error);
        return false;
    }
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
 */
async function typeWithHumanSpeed(page: any, selector: string, text: string): Promise<boolean> {
    try {
        const element = await page.$(selector);
        if (!element) return false;
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
        await element.focus();
        
        // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
        for (const char of text) {
            await page.keyboard.type(char);
            
            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ –∫–ª–∞–≤–∏—à (30-100ms)
            const delay = Math.floor(Math.random() * 70) + 30;
            await new Promise(resolve => setTimeout(resolve, delay));
            
            // –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É (–∫–∞–∫ –±—É–¥—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–¥—É–º–∞–ª—Å—è)
            if (Math.random() < 0.05) {
                await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 700));
            }
        }
        
        return true;
    } catch (error) {
        console.error("Error typing with human speed:", error);
        return false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é runThreads –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ index.ts
export { runThreads };